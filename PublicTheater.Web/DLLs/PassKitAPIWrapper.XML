<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PassKitAPIWrapper</name>
    </assembly>
    <members>
        <member name="T:RestSharp.Authenticators.DigestAuthenticator">
            <summary>
            Custom implementation of the IAuthenticator class to support HTTP Digest Auth
            </summary>
        </member>
        <member name="F:RestSharp.Authenticators.DigestAuthenticator._user">
            <summary>
            User string
            </summary>
        </member>
        <member name="F:RestSharp.Authenticators.DigestAuthenticator._pass">
            <summary>
            Password string
            </summary>
        </member>
        <member name="M:RestSharp.Authenticators.DigestAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="user">User string</param>
            <param name="pass">Password string</param>
        </member>
        <member name="M:RestSharp.Authenticators.DigestAuthenticator.Authenticate(RestSharp.IRestClient,RestSharp.IRestRequest)">
            <summary>
            Authenticate function
            </summary>
            <param name="client">IRestClient client</param>
            <param name="request">IRestRequest request</param>
        </member>
        <member name="T:RestSharp.Deserializers.DynamicJsonDeserializer">
            <summary>
            Custom implementation of the IDeserializer class to return the JSON response as a Dictionary object
            </summary>
        </member>
        <member name="M:RestSharp.Deserializers.DynamicJsonDeserializer.Deserialize``1(RestSharp.IRestResponse)">
            <summary>
            Deserializes the JSON as a Dictionary&lt;string, dynamic&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:RestSharp.Deserializers.DynamicJsonDeserializer.RootElement">
            <summary>
            RootElement
            </summary>
        </member>
        <member name="P:RestSharp.Deserializers.DynamicJsonDeserializer.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:RestSharp.Deserializers.DynamicJsonDeserializer.DateFormat">
            <summary>
            Dateformat
            </summary>
        </member>
        <member name="T:PassKitAPIWrapper.PassKitResponse">
            <summary>
            Meta data class for PassKit API response
            </summary>
        </member>
        <member name="M:PassKitAPIWrapper.PassKitResponse.#ctor(System.Net.HttpStatusCode,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor for PassKitResponse
            </summary>
            <param name="statusCode">The HttpStatusCode of the request</param>
            <param name="response">The JSON response string</param>
        </member>
        <member name="P:PassKitAPIWrapper.PassKitResponse.statusCode">
            <summary>
            The HttpStatusCode returned by the request
            </summary>
        </member>
        <member name="P:PassKitAPIWrapper.PassKitResponse.response">
            <summary>
            The (JSON) response from the server, serialized as a dynamic Dictionary. If the request was successful, response["success"] will be set.
            </summary>
        </member>
        <member name="T:PassKitAPIWrapper.PassKitImageType">
            <summary>
            Allow uses for uploaded images.
            </summary>
        </member>
        <member name="F:PassKitAPIWrapper.PassKitImageType.background">
            <summary>
            For background use
            </summary>
        </member>
        <member name="F:PassKitAPIWrapper.PassKitImageType.footer">
            <summary>
            For footer use
            </summary>
        </member>
        <member name="F:PassKitAPIWrapper.PassKitImageType.logo">
            <summary>
            For logo use
            </summary>
        </member>
        <member name="F:PassKitAPIWrapper.PassKitImageType.icon">
            <summary>
            For icon use
            </summary>
        </member>
        <member name="F:PassKitAPIWrapper.PassKitImageType.strip">
            <summary>
            For strip use
            </summary>
        </member>
        <member name="F:PassKitAPIWrapper.PassKitImageType.thumbnail">
            <summary>
            For thumbnail use
            </summary>
        </member>
        <member name="T:PassKitAPIWrapper.PassKit">
            <summary>
            Main PassKit API wrapper class
            </summary>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.#ctor(System.String,System.String)">
            <summary>
            Constructor for the PassKit class. 
            All API methods return a PassKitResponse object that always contains:
            1. HTTP Response Code;
            2. Response object. The first parameter on success is: success (bool), or error (string) on error;
            </summary>
            <param name="account">The PassKit API account key: a 32 character Hexadecimal string or a 20 character base62 string</param>
            <param name="secret">The PassKit API secret: a base64 string</param>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.Execute(RestSharp.RestRequest)">
            <summary>
            The execute method. Used for all calls to the API.
            </summary>
            <param name="request">The RestRequest object</param>
            <returns>A PassKitResponse object with the HTTP status code, and the JSON result serialized as Dictionary&lt;string, dynamic&gt;</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.GetPasses(System.String)">
            <summary>
            Gets the passes for a given template.
            <see href="https://code.google.com/p/passkit/wiki/GetPassesForTemplate">More info</see>  
            </summary>
            <param name="templateName">The template name</param>
            <returns>PassKitResponse object, with on success the pass meta &amp; field data (for all the passes with templateName).</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.GetTemplates">
            <summary>
            Requests a list of templates for the current API account.
            <see href="https://code.google.com/p/passkit/wiki/ListTemplates">More info</see>
            </summary>
            <returns>PassKitResponse, with on success a list of template names.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.GetTemplateFieldNames(System.String,System.Boolean)">
            <summary>
            This method returns the field names that can be used with the Issue Pass and Update Pass methods for a particular template. 
            It returns the names of all dynamic fields in the template, plus other variables such as barcode content, serial number or thumbnail 
            image that can be set or updated.
            <see href="https://code.google.com/p/passkit/wiki/GetTemplateDetails">More info</see>
            </summary>
            <param name="templateName">The name of the template</param>
            <param name="full">Boolean, if true the method will also return information re. the fields on the back of the template</param>
            <returns>PassKitResponse, with on success a list of template details.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.UpdateTemplate(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Updates the template. Causes all the passes of the template to be updated as well.
            <see href="https://code.google.com/p/passkit/wiki/UpdatePass">More info</see>  
            </summary>
            <param name="templateName">The template name</param>
            <param name="fields">A dictionary of field-names and their values</param>
            <param name="push">Indicates if the update should be pushed to all devices with an active pass</param>
            <returns>PassKitResponse object, with on success a list of device id's for which pushes were dispatched to Apple.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.ResetTemplate(System.String,System.Boolean)">
            <summary>
            This method resets each pass record to the default values. This only affects values that the user cannot edit. 
            The method also removes all data-fields from each pass record.
            <see href="https://code.google.com/p/passkit/wiki/ResetTemplate">More info</see>
            </summary>
            <param name="templateName">The name of the template</param>
            <param name="push">Indicates if the update should be pushed to all devices with an active pass</param>
            <returns>PassKitResponse object, with on success a list of device id's for which pushes were dispatched to Apple.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.IssuePass(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Issues a new PassKit pass for template with 'templateName', with the data provided in the 'fields' dictionary.
            The 'fields' dictionary uses the field-names as 'key' and the values as 'value'.
            <see href="https://code.google.com/p/passkit/wiki/IssuePass">More info</see>
            </summary>
            <param name="templateName">The name of the template to issue the pass for</param>
            <param name="fields">A dictionary of field-names and their values</param>
            <returns>PassKitResponse object, with on success the pass url &amp; pass serial.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.UpdatePass(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Updates the fields for pass identified by 'templateName' and 'serialNumber'. Method can update multiple passes at once in case
            the user decided to use the same serial for multiple passes in the pass designer.
            <see href="https://code.google.com/p/passkit/wiki/UpdatePass">More info</see>  
            </summary>
            <param name="templateName">The template name of the pass</param>
            <param name="serialNumber">The serial number of the pass</param>
            <param name="fields">A dictionary of field-names and their values</param>
            <param name="push">Indicates if the update should be pushed to all devices with an active pass</param>
            <returns>PassKitResponse object, with on success a list of device id's for which pushes were dispatched to Apple.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.UpdatePass(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Updates the fields for pass identified by 'passId'. 'passId' is unique, so method will update one pass.
            <see href="https://code.google.com/p/passkit/wiki/UpdatePass">More info</see>  
            </summary>
            <param name="passId">The unique pass id</param>
            <param name="fields">A dictionary of field-names and their values</param>
            <param name="push">Indicates if the update should be pushed to all devices with an active pass</param>
            <returns>PassKitResponse object, with on success a list of device id's for which pushes were dispatched to Apple.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.GetPassDetails(System.String)">
            <summary>
            Gets the details for a pass identified by the given unique pass-id. Returns the details for one unique pass only.
            <see href="https://code.google.com/p/passkit/wiki/GetPassDetailsPassId">More info</see>
            </summary>
            <param name="passId">The unique pass id for the pass</param>
            <returns>PassKitResponse object, with on success the pass meta &amp; field data.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.GetPassDetails(System.String,System.String)">
            <summary>
            Gets the details for a pass identified by the given template name and serial number. Serial number is not unique
            in case the user decided to use the same serial for multiple passes in the pass designer. In that case the response
            can contain information for multiple passes.
            <see href="https://code.google.com/p/passkit/wiki/GetPassDetailsTemplateSerial">More info</see> 
            </summary>
            <param name="templateName">The template name of the pass</param>
            <param name="serialNumber">The serial number pf the pass</param>
            <returns>PassKitResponse object, with on success the pass meta &amp; field data in the PassKitResponse.response.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.UploadImage(System.String,PassKitAPIWrapper.PassKitImageType)">
            <summary>
            This method allows you to upload images for use with other methods such as template methods and pass methods. 
            Each image that is uploaded is assigned a unique ID, and is processed for use with Passbook, 
            according to the imageType selected.
            </summary>
            <param name="pathToLocalFile">The path to the local filename (make sure that you have read access to the file)</param>
            <param name="imageType">The image type of the file (according to PassKitImageType enum)</param>
            <returns>PassKitResponse object, with on success the image ID and the usage.</returns>
        </member>
        <member name="M:PassKitAPIWrapper.PassKit.GetImageData(System.String)">
            <summary>
            Method returns information about the image with imageId.
            </summary>
            <param name="imageId">The unique ID of the image</param>
            <returns>PassKitResponse object, with on success the information for the image.</returns>
        </member>
    </members>
</doc>
